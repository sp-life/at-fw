#!/bin/bash
##############################################################################
# Variant Definitions
#-----------------------------------------------------------------------------
#/-- General Definitions -----------------------------------------------------
SAT_ROOT=$(dirname `pwd`/$0)
ASSIST_TOOLS=$SAT_ROOT/tools
PROJ_NAME=sof-test-suites
PROJ_ROOT=$SAT_ROOT/$PROJ_NAME
LOG_FILE_NAME=
FORCE_CONFIRMED=false
REPORT_ROOT=$SAT_ROOT/report
REPORT_TYPE=text
#\----------------------------------------------------------------------------

#/-- Resource Definitions ----------------------------------------------------
STR_PROPMT_NEW_PROJECT="Project(%s) Missed , create project now?(Yes/no): "
STR_PROPMT_NEW_SUITE="Test suite(%s) Missed , create test suite now?(Yes/no): "

D_BASE_SUITE=__base__
D_KEYWORDS_POOL=__keywords__
F_SUITE_CONF=_suite.conf
F_INIT_SH=_init_
F_UNINIT_SH=_uninit_
#\----------------------------------------------------------------------------

#/-- Other Definitions -------------------------------------------------------
OPERATE_ORDER=(s e C c u l x)
TEST_SUITES=()
NDEBUG=yes
#\----------------------------------------------------------------------------

#/-- Export Definitions ------------------------------------------------------
export SAT_ROOT ASSIST_TOOLS NDEBUG
#\----------------------------------------------------------------------------
# END: Config File Load
##############################################################################

##############################################################################
# BEG: Includes scripts
. sat-fw/conf-key.lst
. sat-fw/at-utils
. sat-fw/at-conf
. sat-fw/at-framework
# END: Includes scripts
##############################################################################

# create a test project
# param: $1 projName
function create_project
{
    local projName=$1
    PROJ_ROOT=$SAT_ROOT/$projName
    if [[ $FORCE_CONFIRMED == true ]]; then
        mkdir -p $PROJ_ROOT
        conf_new_proj $PROJ_ROOT/$F_SUITE_CONF
        conf_general_upd $PROJ_ROOT/$F_SUITE_CONF $K_REPORT_ROOT"=$REPORT_ROOT"
        conf_general_upd $PROJ_ROOT/$F_SUITE_CONF $K_REPORT_TYPE"=$REPORT_TYPE"
        conf_general_upd $PROJ_ROOT/$F_SUITE_CONF $K_ASSIST_TOOLS"=$ASSIST_TOOLS"
    else
        printf "$STR_PROPMT_NEW_PROJECT" $projName
        read comfirmed
        if [[ $comfirmed == 'no' ]]; then
            loge "No valid project, failed to run the auto test..."
            exit 1
        else
            mkdir -p $PROJ_ROOT
            conf_new_proj $PROJ_ROOT/$F_SUITE_CONF
        fi
    fi
}

# execute __base__ test suite
# param: <n/a>
function execute_base_suite
{
    [[ ! -d $PROJ_ROOT/$D_BASE_SUITE ]] && {
        logw "No base test suite for the project, skipping base test..."
        return 0
    }
    execute_suite $PROJ_ROOT/$D_BASE_SUITE
}

# process the input operator options
# param: $* optArray
function process_options
{
    local optArray=($*)
    for o in ${OPERATE_ORDER[@]}; do
        for i in ${optArray[@]}; do
            if [[ $o == ${i%:*} ]]; then
                case $o in
                    s)  # select test suite, if not exist, create one manually or automatically.
                        # it is used for -l & -c
                        local suite=${i#*:}
                        local suiteArray=(${suite//;/ })

                        for ts in ${suiteArray[@]}; do
                            # relevant path convert to abosulate path
                            [[ ${ts:0:1} != '/' ]] && ts=$PROJ_ROOT/$ts

                            if [[ ! -d $ts ]]; then
                                if [[ $FORCE_CONFIRMED == true ]]; then
                                    mkdir -p $ts
                                    conf_new_suite $ts/$F_SUITE_CONF
                                fi

                                # TODO: current only support create test suite under 1-level project directory.
                                # need be extented no limited directory depth in furture.
                                printf "$STR_PROPMT_NEW_SUITE" `basename $ts`
                                read comfirmed
                                if [[ $comfirmed == 'no' ]]; then
                                    logw "Invalid test suite, skip to preparing load ..."
                                    continue
                                else
                                    mkdir -p $PROJ_ROOT
                                    conf_new_proj $PROJ_ROOT/$F_SUITE_CONF
                                fi
                            fi
                            TEST_SUITES=(${TEST_SUITES[@]} $ts)
                        done
                        ;;

                    e)  # enable/disable test suites
                        local suite=${i#*:}
                        logi "Enabled/disable the suites: "$suite
                        local suiteArray=(${suite//;/ })
                        for ts in ${suiteArray[@]}; do
                                # relevant path convert to abosulate path
                            [[ ${ts:0:1} != '/' ]] && ts=$PROJ_ROOT/$ts
                            if [[ ! -d $ts ]]; then
                                logw "Invalid test suite `basename $ts`, failed to run the auto test..." # TODO: 1 depth dir limit
                                continue
                            fi
                            conf_suite_list_upd $PROJ_ROOT/$F_SUITE_CONF $ts
                        done
                        ;;

                    c)  # update customize keyvalues
                        local kv=${i#*:}
                        logi "Update customize the key-values pair: {"$kv"}"
                        for ts in ${TEST_SUITES[@]}; do
                            conf_customize_upd $ts/$F_SUITE_CONF $kv
                        done
                        ;;

                    C)  # update customize keyvalues for project level
                        local kv=${i#*:}
                        logi "Update customize the key-values pair: {"$kv"}"
                        conf_customize_upd $PROJ_ROOT/$F_SUITE_CONF $kv
                        ;;

                    u)  # TODO: update the whole project's status if cases/suites changed.
                        ;;

                    l)  # list the project's test suites or suites' cases
                        if [[ ${#TEST_SUITES[@]} -eq 0 ]]; then
                            # list the project's test suites
                            local list=(conf_suite_list_load $PROJ_ROOT/$F_SUITE_CONF)
                            logi "---------------------- SUITE LIST ---------------------"
                            for item in ${list[@]}; do
                                logi $item
                            done
                            logi "-------------------------------------------------------"
                        else
                            # TODO: show the suites' case list
                            echo 'TODO'
                        fi
                        ;;

                    x)  # execute the test project or test suite
                        prepare_project $PROJ_ROOT

                        execute_base_suite

exit 1
                        if [[ ${#TEST_SUITES[@]} -eq 0 ]]; then
                            # list the project's test suites
                            local list=(conf_suite_list_load $PROJ_ROOT/$F_SUITE_CONF)
                            for item in ${list[@]}; do
                                if [[ ${item#*=} == y ]]; then
                                    execute_suite $PROJ_ROOT/${item%=*}
                                fi
                            done
                        else
                            for ts in ${TEST_SUITES[@]}; do
                                execute_suite $ts
                            done
                        fi

                        cleanup_project $PROJ_ROOT
                        ;;
                esac
                break
            fi
        done
    done
}

#/----------------------------------------------------------------------------
#| AT Main Entrance
#/----------------------------------------------------------------------------
function __main__ #argv:$1 $2 $3 ...
{
    local execOpts=()
    while getopts ':c:C::e::fxlo::p::s::u' opt; do
        case $opt in
            f)
                logi "Automatic confirmed enabled!"
                FORCE_CONFIRMED=true
                ;;

            o)
                REPORT_ROOT=${OPTARG#:*}
                [[ $REPORT_ROOT != $OPTARG ]] && REPORT_TYPE=${OPTARG#*:}
                # TODO: verify if report type supported.
                logi "Set output report directory [$REPORT_ROOT] & type [$REPORT_TYPE]"
                ;;

            p)
                logi "Select Project: "$OPTARG
                PROJ_NAME=$OPTARG
                [[ ! -d $SAT_ROOT/$PROJ_NAME ]] && create_project $PROJ_NAME
                PROJ_ROOT=$SAT_ROOT/$PROJ_NAME
                ;;

            C|c|e|x|s)
                execOpts=(${execOpts[@]} $opt:$OPTARG)
                ;;

            l|u)
                execOpts=(${execOpts[@]} $opt:-)
                ;;

            *)
                loge "==>Invalid option: "$opt
                # usage
                ;;
        esac
    done

    process_options ${execOpts[@]}
    exit 0
}
#\----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
__main__ -p $PROJ_NAME $* #2>&1 | tee
